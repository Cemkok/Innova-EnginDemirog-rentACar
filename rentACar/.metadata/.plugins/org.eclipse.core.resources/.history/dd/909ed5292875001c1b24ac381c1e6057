package com.btkAkademi.rentACar.business.concretes;

import java.time.LocalDateTime;
import java.time.Period;
import java.util.List;

import org.springframework.stereotype.Service;

import com.btkAkademi.rentACar.business.abstracts.AdditionalServiceService;
import com.btkAkademi.rentACar.business.abstracts.CarService;
import com.btkAkademi.rentACar.business.abstracts.PaymentService;
import com.btkAkademi.rentACar.business.abstracts.RentalService;
import com.btkAkademi.rentACar.business.requests.paymentRequests.CreatePaymentRequest;
import com.btkAkademi.rentACar.core.utilities.business.BusinessRules;
import com.btkAkademi.rentACar.core.utilities.mapping.ModelMapperService;
import com.btkAkademi.rentACar.core.utilities.results.Result;
import com.btkAkademi.rentACar.core.utilities.results.SuccessResult;
import com.btkAkademi.rentACar.dataAccess.abstracts.PaymentDao;
import com.btkAkademi.rentACar.entities.concretes.AdditionalService;
import com.btkAkademi.rentACar.entities.concretes.Payment;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class PaymentManager implements PaymentService {
	private PaymentDao paymentDao;
	private ModelMapperService modelMapperService;
	private RentalService rentalService;
	private CarService carService;
	private AdditionalServiceService additionalServiceService;
	
	public PaymentManager(PaymentDao paymentDao, ModelMapperService modelMapperService,
			RentalService rentalService, AdditionalServiceService additionalServiceService, 
			CarService carService
			) {
		this.paymentDao=paymentDao;
		this.modelMapperService=modelMapperService;
		this.rentalService=rentalService;
		this.additionalServiceService=additionalServiceService;
		this.carService=carService;	
		
	}
	
	@Override
	public Result add(CreatePaymentRequest createPaymentRequest) {
		Result result=BusinessRules.run(
				);
		if(!result.isSuccess()) {
			return result;
		}
		Payment payment=modelMapperService.forRequest().map(createPaymentRequest, Payment.class);
		Integer rentalId=createPaymentRequest.getRentalId();
		payment=paymentCalculate(payment,rentalId);
		
		this.paymentDao.save(payment);
		return new SuccessResult("ödeme alındı");
	}
		private Payment paymentCalculate(Payment payment,Integer rentalId) {
			RentalDto rental=rentalService.getById(rental.getRentDate(),rental.getReturnDate());
			
		//date difference
			Period diff=Period.between(rental, getRentDate(),rental.getReturnDate());
			//dependency
			CarDto carDto =carService.getById(rental.gerCardId()).getData();
			List<AdditionalService> additionalService=additionalService.getByRentalId(rentalId).getData();
			Double serviceTotalPrice = additionalService.stream()
	                .map(a->a.getPrice())
	                .reduce((double) 0, (Double::sum));

	        Double total = carDto.getDailyPrice()*diff.getDays()+serviceTotalPrice;

	        if(!rental.getReturnDate().equals(LocalDateTime.now())){
	            payment.setTotal(total);
	        }

	        return payment;

	    }
	
			
			
		
		
		
	
	}

	

